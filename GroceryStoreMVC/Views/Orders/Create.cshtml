@model GroceryStoreMVC.Models.Order

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Order</h4>
<hr />
<div class="row">
    <div class="col-md-8">
        <form asp-action="Create" id="orderForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <!-- Order Fields -->
            <div class="form-group">
                <label asp-for="OrderDate" class="control-label"></label>
                <input asp-for="OrderDate" class="form-control" type="datetime-local" />
                <span asp-validation-for="OrderDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CustomerId" class="control-label"></label>
                <select asp-for="CustomerId" class="form-control" asp-items="ViewBag.CustomerId"></select>
            </div>
            <div class="form-group">
                <label asp-for="TotalAmount" class="control-label"></label>
                <input asp-for="TotalAmount" class="form-control" readonly />
                <span asp-validation-for="TotalAmount" class="text-danger"></span>
            </div>

            <!-- Order Details Section -->
            <h4>Order Details</h4>
            <table class="table" id="orderDetailsTable">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be added dynamically here -->
                </tbody>
            </table>

            <!-- Add Product Button -->
            <button type="button" id="addProduct" class="btn btn-secondary">Add Product</button>

            <!-- Submit Button -->
            <div class="form-group mt-3">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        // Function to add a new row for Order Details
        document.getElementById('addProduct').addEventListener('click', function () {
            const tableBody = document.querySelector('#orderDetailsTable tbody');
            const rowCount = tableBody.querySelectorAll('tr').length;

            const newRow = document.createElement('tr');
            newRow.innerHTML = `
                <td>
                    <select name="OrderDetails[${rowCount}].ProductId" class="form-control" asp-items="ViewBag.ProductId">
        @foreach (var product in ViewBag.ProductId)
        {
                                <option value="@product.Value">@product.Text</option>
        }
                    </select>
                </td>
                <td>
                    <input name="OrderDetails[${rowCount}].Quantity" class="form-control" type="number" min="1" required />
                </td>
                <td>
                    <input name="OrderDetails[${rowCount}].Price" class="form-control" type="number" step="0.01" min="0" required />
                </td>
                <td>
                    <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                </td>
            `;

            tableBody.appendChild(newRow);
        });

        // Function to remove a row
        function removeRow(button) {
            const row = button.closest('tr');
            row.remove();
        }

        // Function to calculate the total amount
        document.getElementById('orderForm').addEventListener('input', function (e) {
            if (e.target.name && e.target.name.includes('OrderDetails')) {
                calculateTotalAmount();
            }
        });

        function calculateTotalAmount() {
            let totalAmount = 0;
            const rows = document.querySelectorAll('#orderDetailsTable tbody tr');

            rows.forEach(row => {
                const quantity = row.querySelector('input[name$="Quantity"]').value;
                const price = row.querySelector('input[name$="Price"]').value;

                if (quantity && price) {
                    totalAmount += parseFloat(quantity) * parseFloat(price);
                }
            });

            document.querySelector('input[name="TotalAmount"]').value = totalAmount.toFixed(2);
        }
    </script>
}